package kr.co._29cm.homework.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import kr.co._29cm.homework.domain.Product;
import kr.co._29cm.homework.mapper.ProductMapper;
import kr.co._29cm.homework.repository.ProductRepository;
import kr.co._29cm.homework.service.ShippingCalculator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.math.BigDecimal;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest({ProductController.class, kr.co._29cm.homework.exception.GlobalExceptionHandler.class})
class ProductControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ProductRepository productRepository;
    
    @MockBean
    private ProductMapper productMapper;
    
    @MockBean
    private ShippingCalculator shippingCalculator;

    @Autowired
    private ObjectMapper objectMapper;

    private Product testProduct1;
    private Product testProduct2;

    @BeforeEach
    void setUp() {
        testProduct1 = new Product(768848L, "[STANLEY] GO CERAMIVAC 진공 텀블러/보틀 3종", 
                BigDecimal.valueOf(21000), 45);
        testProduct2 = new Product(759928L, "마스크 스트랩 분실방지 오염방지 목걸이", 
                BigDecimal.valueOf(2800), 85);
    }

    @Test
    void 상품_목록_페이징_조회_성공() throws Exception {
        // given - 페이징 API 테스트
        List<Product> products = List.of(testProduct1, testProduct2);
        Page<Product> productPage = new PageImpl<>(products);
        when(productRepository.findAll(any(Pageable.class))).thenReturn(productPage);
        when(productMapper.toResponse(any(Product.class))).thenReturn(
            kr.co._29cm.homework.dto.response.ProductResponse.builder()
                .id(1L)
                .productNumber(768848L)
                .name("[STANLEY] GO CERAMIVAC 진공 텀블러/보틀 3종")
                .price(BigDecimal.valueOf(21000))
                .stockQuantity(45)
                .build()
        );

        // when & then
        mockMvc.perform(get("/api/products")
                        .param("page", "0")
                        .param("size", "10")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data.content").isArray());
    }

    @Test
    void 전체_상품_목록_조회_성공() throws Exception {
        // given - /all 엔드포인트 테스트
        List<Product> products = List.of(testProduct1, testProduct2);
        when(productRepository.findAll()).thenReturn(products);
        when(productMapper.toResponseList(products)).thenReturn(
            List.of(
                kr.co._29cm.homework.dto.response.ProductResponse.builder()
                    .id(1L)
                    .productNumber(768848L)
                    .name("[STANLEY] GO CERAMIVAC 진공 텀블러/보틀 3종")
                    .price(BigDecimal.valueOf(21000))
                    .stockQuantity(45)
                    .build(),
                kr.co._29cm.homework.dto.response.ProductResponse.builder()
                    .id(2L)
                    .productNumber(759928L)
                    .name("마스크 스트랩 분실방지 오염방지 목걸이")
                    .price(BigDecimal.valueOf(2800))
                    .stockQuantity(85)
                    .build()
            )
        );

        // when & then
        mockMvc.perform(get("/api/products/all")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.success").value(true))
                .andExpect(jsonPath("$.data").isArray())
                .andExpect(jsonPath("$.data").value(org.hamcrest.Matchers.hasSize(2)));
    }
}
